{"remainingRequest":"/home/rvp/isochrone-calculator/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/rvp/isochrone-calculator/frontend/src/components/IsochroneCalculator.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/rvp/isochrone-calculator/frontend/src/components/IsochroneCalculator.vue","mtime":1614645913868},{"path":"/home/rvp/isochrone-calculator/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rvp/isochrone-calculator/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/rvp/isochrone-calculator/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rvp/isochrone-calculator/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICdheGlvcycKaW1wb3J0IEdNYXAgZnJvbSAiLi9HTWFwIjsKaW1wb3J0IElucHV0Rm9ybSBmcm9tICcuL0lucHV0Rm9ybScKZXhwb3J0IGRlZmF1bHQgewoJbmFtZTogIklzb2Nocm9uZUNhbGN1bGF0b3IiLAoKCWNvbXBvbmVudHM6IHsKCQlHTWFwLAoJCUlucHV0Rm9ybSwKCX0sCgoJZGF0YSA6IGZ1bmN0aW9uKCl7CgkJcmV0dXJuewoJCQlsb2FkaW5nIDpmYWxzZQoJCX0KCX0sCgkKCW1ldGhvZHM6IHsKCQlkcmF3OiBhc3luYyBmdW5jdGlvbiAoZGF0YSkgewoKCQkJdGhpcy5sb2FkaW5nID0gdHJ1ZQoKCQkJYXhpb3MucG9zdCgnaHR0cDovL2xvY2FsaG9zdDo1MDAwL2NvbXB1dGUnICwgZGF0YSkKCQkJLnRoZW4ocmVzcG9uc2UgPT57CgkJCQlpZihyZXNwb25zZS5kYXRhLnN0YXR1cyA9PT0gJ3N1Y2Nlc3MnKXsKCQkJCQlsZXQgaXNvY2hyb25lID0gcmVzcG9uc2UuZGF0YS5yZXN1bHQKCQkJCQl0aGlzLiRyZWZzLmdtYXAuZHJhdyhkYXRhLm9yaWdpbiwgaXNvY2hyb25lKQoJCQkJfQkJCQkKCQkJfSkKCQkJLmNhdGNoKGVycm9yID0+ewoJCQkJY29uc29sZS5sb2coZXJyb3IpCgkJCX0pCgkJCS5maW5hbGx5KCgpID0+ewoJCQkJdGhpcy5sb2FkaW5nID0gZmFsc2UKCQkJfSkKCgkJfQoJfQp9Cg=="},{"version":3,"sources":["IsochroneCalculator.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"IsochroneCalculator.vue","sourceRoot":"src/components","sourcesContent":["<template>\n\t<v-container fluid>\n\t\t<v-row>\n\t\t\t<v-col cols=\"4\">\t\t\t\t\n\t\t\t\t<InputForm @submit=\"data => draw(data)\" :loading=\"loading\"/>\n\t\t\t</v-col>\n\n\t\t\t<v-col cols=\"8\">\n\t\t\t\t<GMap v-if=\"false\" :polygonCoordinates=\"polygonCoordinates\" :originCoordinates=\"originCoordinates\" ref=\"gmap\" />\n\t\t\t</v-col>\n\t\t</v-row>\n\t</v-container>\n</template>\n\n<script>\nimport axios from 'axios'\nimport GMap from \"./GMap\";\nimport InputForm from './InputForm'\nexport default {\n\tname: \"IsochroneCalculator\",\n\n\tcomponents: {\n\t\tGMap,\n\t\tInputForm,\n\t},\n\n\tdata : function(){\n\t\treturn{\n\t\t\tloading :false\n\t\t}\n\t},\n\t\n\tmethods: {\n\t\tdraw: async function (data) {\n\n\t\t\tthis.loading = true\n\n\t\t\taxios.post('http://localhost:5000/compute' , data)\n\t\t\t.then(response =>{\n\t\t\t\tif(response.data.status === 'success'){\n\t\t\t\t\tlet isochrone = response.data.result\n\t\t\t\t\tthis.$refs.gmap.draw(data.origin, isochrone)\n\t\t\t\t}\t\t\t\t\n\t\t\t})\n\t\t\t.catch(error =>{\n\t\t\t\tconsole.log(error)\n\t\t\t})\n\t\t\t.finally(() =>{\n\t\t\t\tthis.loading = false\n\t\t\t})\n\n\t\t}\n\t}\n}\n</script>\n"]}]}