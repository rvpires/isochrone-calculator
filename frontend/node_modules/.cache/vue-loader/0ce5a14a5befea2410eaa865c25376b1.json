{"remainingRequest":"/home/rvp/isochrone-calculator/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/rvp/isochrone-calculator/src/components/IsochroneCalculator.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/rvp/isochrone-calculator/src/components/IsochroneCalculator.vue","mtime":1614294791501},{"path":"/home/rvp/isochrone-calculator/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rvp/isochrone-calculator/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/rvp/isochrone-calculator/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rvp/isochrone-calculator/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8vaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJwppbXBvcnQgR01hcCBmcm9tICIuL0dNYXAiOwpleHBvcnQgZGVmYXVsdCB7CgluYW1lOiAiSXNvY2hyb25lQ2FsY3VsYXRvciIsCgoJY29tcG9uZW50czogewoJCUdNYXAsCgl9LAoKCWRhdGE6IGZ1bmN0aW9uICgpIHsKCQlyZXR1cm4gewoJCQlwb2x5Z29uQ29vcmRpbmF0ZXM6IFtdLAoJCQlvcmlnaW5Db29yZGluYXRlczogeyBsYXQ6IDQxLjE4NDY3OSwgbG5nOiAtOC42ODE1NTQgfSwKCQkJbl9wb2ludHMgOiAxMiwKCQkJZHVyYXRpb24gOiA1CgoJCX07Cgl9LAoKCW1ldGhvZHM6IHsKCQlkcmF3OiBmdW5jdGlvbiAoKSB7CgkJCXRoaXMuJHJlZnMuZ21hcC5kcmF3KCk7CgkJfSwKCgkJY29tcHV0ZUlzb2Nocm9uZSA6IGZ1bmN0aW9uKCl7CgoJCX0sCgoJCXJhZGlhbnM6IGZ1bmN0aW9uKGRlZ3JlZXMpewoJCQl2YXIgcGkgPSBNYXRoLlBJOwoJCQlyZXR1cm4gZGVncmVlcyAqIChwaS8xODApOwoJCX0sCgoJCWRlZ3JlZXM6IGZ1bmN0aW9uKHJhZGlhbnMpewoJCQl2YXIgcGkgPSBNYXRoLlBJOwoJCQlyZXR1cm4gcmFkaWFucyAqIDE4MC8gcGk7CgkJfSwKCgkJaW5pdGlhbFBsb3R0aW5nIDogZnVuY3Rpb24ob3JpZ2luR2VvY29kZSAsIGFuZ2xlICwgcmFkaXVzKXsKCgkJCS8qSGFydnNpbmVzIGFyZSB1c2VkIHRvIGNvbnNpZGVyIGVhcnRoIGN1cnZhdHVyZQoJCQlvcmlnaW5fZ2VvY29kZSBpcyB0aGUgR1BTIGNvb3JkaW5hdGVzIG9mIG9yaWdpbgoJCQlhbmdsZSBpcyB0aGUgYW5nbGUgZnJvbSBpdCdzIGdvaW5nIHRvIGJlIGNhbGN1bGF0ZWQKCQkJcmFkaXVzIGlzIGhvdyBsb25nIHRoZSBhcmNoIGlzIGdvaW5nIHRvIGJlKi8KCgkJCWxldCByID0gNjM3MS4wICAvL1JhZGl1cyBvZiB0aGUgRWFydGggaW4gIGttCgkJCWxldCBiZWFyaW5nID0gdGhpcy5yYWRpYW5zKGFuZ2xlKSAgLy9CZWFyaW5nIGluIHJhZGlhbnMgY29udmVydGVkIGZyb20gYW5nbGUgaW4gZGVncmVlcwoJCQlsZXQgbGF0MSA9IHRoaXMucmFkaWFucyhvcmlnaW5HZW9jb2RlLmxhdCkKCQkJbGV0IGxuZzEgPSB0aGlzLnJhZGlhbnMob3JpZ2luR2VvY29kZS5sbmcpCgoJCQlsZXQgbGF0MiA9IE1hdGguYXNpbihNYXRoLnNpbihsYXQxKSAqIE1hdGguY29zKHJhZGl1cyAvIHIpICsgTWF0aC5jb3MobGF0MSkgKiBNYXRoLnNpbihyYWRpdXMgLyByKSAqIE1hdGguY29zKGJlYXJpbmcpKQoJCQlsZXQgbG5nMiA9IGxuZzEgKyBNYXRoLmF0YW4yKE1hdGguc2luKGJlYXJpbmcpICogTWF0aC5zaW4ocmFkaXVzIC8gcikgKiBNYXRoLmNvcyhsYXQxKSwgTWF0aC5jb3MocmFkaXVzIC8gcikgLSBNYXRoLnNpbihsYXQxKSAqIE1hdGguc2luKGxhdDIpKQoKCQkJbGF0MiA9IHRoaXMuZGVncmVlcyhsYXQyKQoJCQlsbmcyID0gdGhpcy5kZWdyZWVzKGxuZzIpCgoJCQlyZXR1cm4ge2xhdCA6IGxhdDIsIGxuZyA6IGxuZzJ9CgoJCX0KCX0sCgoJY3JlYXRlZCA6IGZ1bmN0aW9uKCl7CQkKCQkKCQlmb3IobGV0IGkgPSAwIDsgaSA8IHRoaXMubl9wb2ludHM7IGkrKyApewoKCQkJbGV0IGluaXRpYWxSYWRpdXMgPSB0aGlzLmR1cmF0aW9uIC8gNgoJCQlsZXQgYW5nbGUgPSAgaSAqIDM2MCAvIHRoaXMubl9wb2ludHMKCgkJCXRoaXMucG9seWdvbkNvb3JkaW5hdGVzID0gdGhpcy5wb2x5Z29uQ29vcmRpbmF0ZXMuY29uY2F0KHRoaXMuaW5pdGlhbFBsb3R0aW5nKHRoaXMub3JpZ2luQ29vcmRpbmF0ZXMgLCBhbmdsZSAsIGluaXRpYWxSYWRpdXMpKQoJCQkKCQl9Cgl9Cn07Cg=="},{"version":3,"sources":["IsochroneCalculator.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA","file":"IsochroneCalculator.vue","sourceRoot":"src/components","sourcesContent":["<template>\n\t<v-container fluid>\n\t\t<v-row>\n\t\t\t<v-col cols=\"4\">\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tIsochrone Center\n\t\t\t\t\t\n\t\t\t\t<v-row v-if=\"false\">\n\t\t\t\t\t<v-col>\n\t\t\t\t\t\t<v-text-field\n\t\t\t\t\t\tlabel=\"Latitude\"\n\t\t\t\t\t\thint=\"Origin latitude in decimal degrees\"\n\t\t\t\t\t\tv-model=\"lat\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</v-col>\n\t\t\t\t\t<v-col>\n\t\t\t\t\t\t<v-text-field\n\t\t\t\t\t\t\tlabel=\"Longitude\"\n\t\t\t\t\t\t\thint=\"Origin longitude in decimal degrees\"\n\t\t\t\t\t\t\tv-model=\"lat\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</v-col>\n\t\t\t\t</v-row>\n\n\t\t\t\t<v-btn @click=\"draw\">Draw</v-btn>\n\t\t\t</v-col>\n\n\t\t\t<v-col cols=\"8\">\n\t\t\t\t<GMap :polygonCoordinates=\"polygonCoordinates\" :originCoordinates=\"originCoordinates\" ref=\"gmap\" />\n\t\t\t</v-col>\n\t\t</v-row>\n\t</v-container>\n</template>\n\n<script>\n//import axios from 'axios'\nimport GMap from \"./GMap\";\nexport default {\n\tname: \"IsochroneCalculator\",\n\n\tcomponents: {\n\t\tGMap,\n\t},\n\n\tdata: function () {\n\t\treturn {\n\t\t\tpolygonCoordinates: [],\n\t\t\toriginCoordinates: { lat: 41.184679, lng: -8.681554 },\n\t\t\tn_points : 12,\n\t\t\tduration : 5\n\n\t\t};\n\t},\n\n\tmethods: {\n\t\tdraw: function () {\n\t\t\tthis.$refs.gmap.draw();\n\t\t},\n\n\t\tcomputeIsochrone : function(){\n\n\t\t},\n\n\t\tradians: function(degrees){\n\t\t\tvar pi = Math.PI;\n\t\t\treturn degrees * (pi/180);\n\t\t},\n\n\t\tdegrees: function(radians){\n\t\t\tvar pi = Math.PI;\n\t\t\treturn radians * 180/ pi;\n\t\t},\n\n\t\tinitialPlotting : function(originGeocode , angle , radius){\n\n\t\t\t/*Harvsines are used to consider earth curvature\n\t\t\torigin_geocode is the GPS coordinates of origin\n\t\t\tangle is the angle from it's going to be calculated\n\t\t\tradius is how long the arch is going to be*/\n\n\t\t\tlet r = 6371.0  //Radius of the Earth in  km\n\t\t\tlet bearing = this.radians(angle)  //Bearing in radians converted from angle in degrees\n\t\t\tlet lat1 = this.radians(originGeocode.lat)\n\t\t\tlet lng1 = this.radians(originGeocode.lng)\n\n\t\t\tlet lat2 = Math.asin(Math.sin(lat1) * Math.cos(radius / r) + Math.cos(lat1) * Math.sin(radius / r) * Math.cos(bearing))\n\t\t\tlet lng2 = lng1 + Math.atan2(Math.sin(bearing) * Math.sin(radius / r) * Math.cos(lat1), Math.cos(radius / r) - Math.sin(lat1) * Math.sin(lat2))\n\n\t\t\tlat2 = this.degrees(lat2)\n\t\t\tlng2 = this.degrees(lng2)\n\n\t\t\treturn {lat : lat2, lng : lng2}\n\n\t\t}\n\t},\n\n\tcreated : function(){\t\t\n\t\t\n\t\tfor(let i = 0 ; i < this.n_points; i++ ){\n\n\t\t\tlet initialRadius = this.duration / 6\n\t\t\tlet angle =  i * 360 / this.n_points\n\n\t\t\tthis.polygonCoordinates = this.polygonCoordinates.concat(this.initialPlotting(this.originCoordinates , angle , initialRadius))\n\t\t\t\n\t\t}\n\t}\n};\n</script>\n"]}]}